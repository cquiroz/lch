<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:jee="http://www.springframework.org/schema/jee"
        xmlns:spring-security="http://www.springframework.org/schema/security"
        default-autowire="no"
        default-lazy-init="false"
        default-merge="false"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd">

    <!-- GET ENVIRONMENT CONFIGURATION USING JNDI -->
    <jee:jndi-lookup id="environment"   jndi-name="java:comp/env/ltts/environment"/>
    <jee:jndi-lookup id="site"          jndi-name="java:comp/env/ltts/site"/>

    <!-- loading configuration properties depending on environment and site -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:ltts.#{environment}.#{site}.properties"/>
    </bean>

    <!-- Import general service configuration -->
    <import resource="classpath:services.context.xml"/>

    <!-- Turn on AspectJ @Configurable support -->
    <context:spring-configured />
    <!-- Turn on @Autowired, @PostConstruct etc support -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />

    <!-- Spring Security Configuration -->
    <!--spring-security:http auto-config='true'>
        <spring-security:intercept-url pattern="/app/administration/**" access="ROLE_LTTS_ADMIN" />
        <spring-security:intercept-url pattern="/app/administration*" access="ROLE_LTTS_ADMIN" />
        <spring-security:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <spring-security:form-login login-page="/app/login" />
    </spring-security:http-->

    <spring-security:authentication-manager alias="authenticationManager">
        <spring-security:authentication-provider ref="ldapActiveDirectoryAuthProvider"/>
    </spring-security:authentication-manager>

    <bean id="userDetailsMapper" class="edu.gemini.lch.web.app.windows.login.UserDetailsMapper"/>

    <bean id="ldapActiveDirectoryAuthProvider" class="org.springframework.security.ldap.authentication.ad.ActiveDirectoryLdapAuthenticationProvider">
        <constructor-arg value="gemini.edu" />
        <constructor-arg value="${lch.ldap.hosts}" />
        <property name="userDetailsContextMapper" ref="userDetailsMapper" />
        <property name="useAuthenticationRequestCredentials" value="true" />
        <property name="convertSubErrorCodesToExceptions" value="true" />
    </bean>

    <!-- USE CONFIGURATION BELOW FOR TESTING WITH A HARD CODED USER (e.g. in case AD is not available) -->
    <!-- comment out authentication manager above and replace with the one below -->
    <!--spring-security:authentication-manager alias="authenticationManager">
        <spring-security:authentication-provider user-service-ref="userDetailsService"/>
    </spring-security:authentication-manager>
    <spring-security:user-service id="userDetailsService">
        <spring-security:user name="admin" password="admin" authorities="ROLE_LTTS_ADMIN"/>
    </spring-security:user-service-->

</beans>
